<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Go" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildProjectDirectory)\Build.tasks" />
  <Import Project="Configit.SignalR.Projects.Properties.proj"
   Condition=" '$(OS)' == 'Windows_NT' " />

  <PropertyGroup>
    <Configuration Condition="$(Configuration) == ''">Debug</Configuration>
    <Nightly Condition="$(Nightly) == ''">true</Nightly>
    <ProjectRoot>$(MSBuildProjectDirectory)\..</ProjectRoot>
    <ArtifactsDir>$(ProjectRoot)\artifacts\$(Configuration)</ArtifactsDir>
    <ProjectArtifactsDir>$(ArtifactsDir)\projects</ProjectArtifactsDir>
    <PackageSrcDir>$(ArtifactsDir)\package-src</PackageSrcDir>
    <PackagesDestinationDir>$(ArtifactsDir)\packages</PackagesDestinationDir>
    <FxCopDir>$(ArtifactsDir)\fxcop</FxCopDir>
    <SamplesDir>$(ArtifactsDir)\samples</SamplesDir>
    <ReadmesSource>$(ProjectRoot)\readmes</ReadmesSource>
    <NuspecsSource>$(ProjectRoot)\nuspecs</NuspecsSource>
    <NuspecsDestination>$(ArtifactsDir)\nuspecs</NuspecsDestination>
    <TestResultsPath>$(ArtifactsDir)\TestResults</TestResultsPath>
    <DocsPath>$(ArtifactsDir)\docs</DocsPath>
    <NuGetToolsPath>$(ProjectRoot)\.nuget</NuGetToolsPath>
    <NuGetExePath>$(NuGetToolsPath)\nuget.exe</NuGetExePath>
    <ToolsPath>$(ProjectRoot)\tools\</ToolsPath>
    <XunitPath>$(ToolsPath)xunit\</XunitPath>
    <ZipExe>$(ToolsPath)7za920\7za.exe</ZipExe>
    <MSBuildCommunityTasksPath>$(MSBuildProjectDirectory)</MSBuildCommunityTasksPath>
  </PropertyGroup>

  <Import Project="$(MSBuildProjectDirectory)\Configit.SignalR.versions.targets" />
  <Import Project="$(MSBuildProjectDirectory)\MSBuild.Community.Tasks.Targets" />

  <!-- Add extra properties to the build for signing -->
  <PropertyGroup Condition="Exists('$(KeyFile)')">
    <ExtraProperties>KeyFile=$(KeyFile)</ExtraProperties>
  </PropertyGroup>

  <PropertyGroup>
    <PrereleaseTagWithSeparator Condition="$(BuildQuality) != ''">-$(BuildQuality)</PrereleaseTagWithSeparator>
    <ScaleoutPrereleaseTagWithSeparator Condition="$(ScaleoutBuildQuality) != ''">-$(ScaleoutBuildQuality)</ScaleoutPrereleaseTagWithSeparator>
    <KatanaPrereleaseTagWithSeparator Condition="$(KatanaBuildQuality) != ''">-$(KatanaBuildQuality)</KatanaPrereleaseTagWithSeparator>
    <AssemblyVersion>$(MajorVersion).$(MinorVersion).$(PatchVersion)</AssemblyVersion>
    <PackageVersion>$(MajorVersion).$(MinorVersion).$(PatchVersion)$(PrereleaseTagWithSeparator)</PackageVersion>
    <ScaleoutPackageVersion>$(MajorVersion).$(MinorVersion).$(PatchVersion)$(ScaleoutPrereleaseTagWithSeparator)</ScaleoutPackageVersion>
    <KatanaPackageVersion>$(KatanaVersion)$(KatanaPrereleaseTagWithSeparator)</KatanaPackageVersion>
  </PropertyGroup>

  <ItemGroup>
    <!-- Platform Specific Client Projects -->
    <!-- The SignalR .NET client is the only remaining project that targets .NET 4.0 starting in SignalR 2.0 -->
    <Projects Include="$(ProjectRoot)\src\Configit.SignalR.Client\Configit.SignalR.Client.csproj">
      <Platform>Net40</Platform>
    </Projects>
    <!-- This is for legacy SignalR -->
    <Projects Include="$(ProjectRoot)\src\Configit.SignalR.SystemWeb\Configit.SignalR.SystemWeb.csproj">
      <RunFxCop>false</RunFxCop>
    </Projects>

    <!-- Add any src projects that have not been defined manually -->
    <Projects Include="$(ProjectRoot)\src\**\*.csproj" Exclude="@(Projects)" />
  </ItemGroup>

  <ItemGroup>
    <UnitTestProjects Include="$(ProjectRoot)\tests\Configit.SignalR.Tests\Configit.SignalR.Tests.csproj"></UnitTestProjects>
    <UnitTestProjects Include="$(ProjectRoot)\tests\Configit.SignalR.Client.Tests\Configit.SignalR.Client.Tests.csproj"></UnitTestProjects>
    <UnitTestProjects Include="$(ProjectRoot)\tests\Configit.SignalR.SqlServer.Tests\Configit.SignalR.SqlServer.Tests.csproj"></UnitTestProjects>
  </ItemGroup>

  <ItemGroup>
    <FunctionalTestProjects Include="@(UnitTestProjects)"></FunctionalTestProjects>
  </ItemGroup>

  <ItemGroup>
    <RegexTransform Include="$(ProjectRoot)\src\Common\CommonVersionInfo.cs">
      <Find>AssemblyVersion\("\d+\.\d+\.\d+"\)</Find>
      <ReplaceWith>AssemblyVersion("$(AssemblyVersion)")</ReplaceWith>
    </RegexTransform>
    <!--Using Assembly version instead of Package version for component.yaml because Xamarin doesn't allow version numbers with "-pre"-->
    <RegexTransform Include="$(ProjectRoot)\src\Common\CommonVersionInfo.cs">
      <Find>AssemblyInformationalVersion\("\d+\.\d+\.\d+(-\w+\d*(-\d+)?)?"\)</Find>
      <ReplaceWith>AssemblyInformationalVersion("$(PackageVersion)")</ReplaceWith>
    </RegexTransform>
    <RegexTransform Include="$(ProjectRoot)\src\Configit.SignalR.Client\Connection.cs">
      <Find>_assemblyVersion = new Version\("\d+\.\d+\.\d+"\)</Find>
      <ReplaceWith>_assemblyVersion = new Version("$(AssemblyVersion)")</ReplaceWith>
    </RegexTransform>
  </ItemGroup>

  <Target Name="UpdateVersion">
    <RegexTransform Items="@(RegexTransform)" />
  </Target>

  <UsingTask AssemblyFile="$(XunitPath)xunit.runner.msbuild.dll"
             TaskName="Xunit.Runner.MSBuild.xunit" />

  <Target Name="CI" DependsOnTargets="RunCodeAnalysis; Build; CopyArtifacts; RunUnitTests;">
  </Target>

  <Target Name="Go" DependsOnTargets="RunCodeAnalysis; Build; CopyArtifacts; RunTests;">
  </Target>

  <Target Name="GoMono" DependsOnTargets="Build;">
  </Target>

  <Target Name="BuildCmd" DependsOnTargets="RunCodeAnalysis; Build; CopyArtifacts; RunUnitTests;">
  </Target>

  <Target Name="BuildNetUnitTests" DependsOnTargets="CreateOutputDirs">
    <MSBuild Projects="%(UnitTestProjects.Identity)"
             Targets="Build"
             Properties="Configuration=$(Configuration);ArtifactsDir=$(ProjectArtifactsDir);SolutionDir=$(ProjectRoot)\;$(ExtraProperties);"
             Condition=" '$(OS)' == 'Windows_NT'"/>
  </Target>

  <Target Name="BuildNetFunctionalTests" DependsOnTargets="CreateOutputDirs">
    <MSBuild Projects="%(FunctionalTestProjects.Identity)"
             Targets="Build"
             Properties="Configuration=$(Configuration);ArtifactsDir=$(ProjectArtifactsDir);SolutionDir=$(ProjectRoot)\;$(ExtraProperties)"
             Condition=" '$(OS)' == 'Windows_NT'"/>
  </Target>

  <Target Name="AnalyzeLogs">
    <Exec Command='powershell -NoProfile -ExecutionPolicy Bypass $(ProjectRoot)\build\AnalyzeLogs.ps1 "$(ProjectArtifactsDir)"' ContinueOnError="true" />
  </Target>

  <Target Name="RunUnitTests" DependsOnTargets="BuildNetUnitTests">
    <xunit Assembly="$(ProjectArtifactsDir)\Configit.SignalR.Tests\Configit.SignalR.Tests.dll"
           Xml="$(TestResultsPath)\Configit.SignalR.Tests.XunitResults.xml"
           Verbose="true" />

    <xunit Assembly="$(ProjectArtifactsDir)\Configit.SignalR.Client.Tests\Configit.SignalR.Client.Tests.dll"
       Xml="$(TestResultsPath)\Configit.SignalR.Client.Tests.XunitResults.xml"
       Verbose="true" />

    <xunit Assembly="$(ProjectArtifactsDir)\Configit.SignalR.SqlServer.Tests\Configit.SignalR.SqlServer.Tests.dll"
           Xml="$(TestResultsPath)\Configit.SignalR.SqlServer.Tests.XunitResults.xml"
           Verbose="true" />

    <CallTarget Targets="KillIISExpress" Condition=" '$(OS)' == 'Windows_NT'" />
    <OnError ExecuteTargets="KillIISExpress" Condition=" '$(OS)' == 'Windows_NT'" />
  </Target>

  <Target Name="KillIISExpress">
    <Exec Command="taskkill /IM iisexpress.exe /F" ContinueOnError="true" />
    <CallTarget Targets="ClearAspNetTempFolder" />
  </Target>

  <Target Name="ClearAspNetTempFolder">
    <RemoveDir Directories="C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\root" ContinueOnError="true" />
    <RemoveDir Directories="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Temporary ASP.NET Files\root" ContinueOnError="true" />
  </Target>

  <Target Name="RunTests" DependsOnTargets="RunUnitTests;">
  </Target>

  <Target Name="CreateOutputDirs">
    <RemoveDir Directories="$(ArtifactsDir)" Condition="Exists('$(ArtifactsDir)')" ContinueOnError="true" />
    <MakeDir Directories="$(ArtifactsDir)" Condition="!Exists('$(ArtifactsDir)')" />
    <MakeDir Directories="$(PackagesDestinationDir)" Condition="!Exists('$(PackagesDestinationDir)')" />
    <MakeDir Directories="$(TestResultsPath)" Condition="!Exists('$(TestResultsPath)')" />
    <MakeDir Directories="$(DocsPath)" Condition="!Exists('$(DocsPath)')" />
  </Target>

  <Target Name="Build" DependsOnTargets="CreateOutputDirs">
    <MSBuild Projects="@(Projects)"
             Targets="%(BuildTargets)"
             Properties="%(BuildProperties)"
             Condition="%(Build) And '$(OS)' == 'Windows_NT'"/>

    <MSBuild Projects="$(ProjectRoot)\Configit.SignalR.Mono.sln"
            Properties="Configuration=$(Configuration);ArtifactsDir=$(ProjectArtifactsDir);$(ExtraProperties)"
            Condition=" '$(OS)' != 'Windows_NT'" />
  </Target>

  <Target Name="CopyArtifacts" DependsOnTargets="Build">
    <ItemGroup>
      <!-- Copy remaining package artifacts to artifacts/{Configuration}/package-src/{Platform}/ -->
      <Artifacts Include="$(ProjectArtifactsDir)\%(Projects.FileName)\Configit.SignalR.*.dll;
                          $(ProjectArtifactsDir)\%(Projects.FileName)\Configit.SignalR.*.pdb;
                          $(ProjectArtifactsDir)\%(Projects.FileName)\Configit.SignalR.*.xml"
                 Condition="%(Projects.CopyArtifacts) And !%(Projects.Sample)">
        <Destination>$(PackageSrcDir)\%(Projects.Platform)</Destination>
      </Artifacts>
      <!-- Copy exe's to artifacts/{Configuration}/package-src/tools/ -->
      <Artifacts Include="$(ProjectArtifactsDir)\%(Projects.FileName)\*.exe"
                 Condition="%(Projects.CopyArtifacts) And !%(Projects.Sample)">
        <Destination>$(PackageSrcDir)\Tools</Destination>
      </Artifacts>
      <!-- Copy samples to artifacts/{Configuration}/samples while keeping directory structure -->
      <Artifacts Include="$(ProjectArtifactsDir)\%(Projects.FileName)\**\*.*" Condition="%(Projects.Sample)">
        <Destination>$(SamplesDir)\%(Projects.FileName)</Destination>
      </Artifacts>
      <!-- Copy nuspecs to artifacts/nuspecs -->
      <Artifacts Include="$(NuspecsSource)\*.nuspec">
        <Destination>$(NuspecsDestination)</Destination>
      </Artifacts>
    </ItemGroup>

    <Copy SourceFiles="@(Artifacts)" DestinationFiles="@(Artifacts->'%(Destination)\%(RecursiveDir)%(Filename)%(Extension)')" />
  </Target>

  <Target Name="RunCodeAnalysis" DependsOnTargets="CreateOutputDirs" Condition="Exists('$(MSBuildExtensionsPath)\Microsoft\VisualStudio\v$(VisualStudioVersion)\CodeAnalysis\fxcoptask.dll')">
    <ItemGroup>
      <ProjectsToAnalyze Include="@(Projects)" Condition="%(Build) And %(RunFxCop) And !%(Sample)">
        <BuildProperties>%(BuildProperties);RunCodeAnalysis=true</BuildProperties>
      </ProjectsToAnalyze>
    </ItemGroup>

    <!-- If the normal Build target is run, FxCop will ignore suppressions -->
    <MSBuild Projects="@(ProjectsToAnalyze)"
             Targets="Rebuild"
             Properties="%(BuildProperties)" />

    <!-- Copy logs to FxCopDir so they are not overwritten -->
    <ItemGroup>
      <AnalysisLogs Include="$(ProjectArtifactsDir)\%(Projects.FileName)\*.CodeAnalysisLog.xml">
        <Destination>$(FxCopDir)\%(Platform)</Destination>
      </AnalysisLogs>
    </ItemGroup>
    <Copy SourceFiles="@(AnalysisLogs)" DestinationFolder="%(Destination)" />
  </Target>

  <!-- Required to restore solution-level packages -->
  <Import Project="$(ProjectRoot)\.nuget\nuget.targets" />

  <Target Name="PrepareCodeCoverage">
    <!-- Restore solution-level packages -->
    <Exec Command='$(NuGetCommand) install "$([System.IO.Path]::Combine($(NuGetToolsPath), "packages.config"))" -source "$(PackageSources)" -o "$(PackagesDir)"' />
  </Target>

  <Target Name="UnitCodeCoverage" DependsOnTargets="PrepareCodeCoverage; BuildNetUnitTests">
    <Copy SourceFiles="$(ProjectRoot)\build\Configit.SignalR.UnitTests.OpenCover.xunit" DestinationFolder="$(ProjectArtifactsDir)" />
    <MSBuild Projects="Configit.SignalR.OpenCover.targets"
             Properties="ArtifactsDir=$(ArtifactsDir);SolutionDir=$(ProjectRoot)\;XunitArgs=$(ProjectArtifactsDir)\Configit.SignalR.UnitTests.OpenCover.xunit"
             Condition="'$(OS)' == 'Windows_NT'"/>
  </Target>

  <Target Name="FunctionalCodeCoverage" DependsOnTargets="PrepareCodeCoverage; BuildNetFunctionalTests">
    <MSBuild Projects="Configit.SignalR.OpenCover.targets"
             Properties="ArtifactsDir=$(ArtifactsDir);SolutionDir=$(ProjectRoot)\;XunitArgs=$(ProjectArtifactsDir)\Configit.SignalR.FunctionalTests\bin\Configit.SignalR.FunctionalTests.dll /noshadow"
             Condition="'$(OS)' == 'Windows_NT'"/>
  </Target>

  <Target Name="CodeCoverage" DependsOnTargets="PrepareCodeCoverage; BuildNetUnitTests; BuildNetFunctionalTests">
    <Copy SourceFiles="$(ProjectRoot)\build\Configit.SignalR.OpenCover.xunit" DestinationFolder="$(ProjectArtifactsDir)" />
    <MSBuild Projects="Configit.SignalR.OpenCover.targets"
             Properties="ArtifactsDir=$(ArtifactsDir);SolutionDir=$(ProjectRoot)\;XunitArgs=$(ProjectArtifactsDir)\Configit.SignalR.OpenCover.xunit"
             Condition="'$(OS)' == 'Windows_NT'"/>
  </Target>

  <Target Name="BuildPackages" DependsOnTargets="CopyArtifacts">
    <ItemGroup>
      <Nuspecs Include="$(NuspecsDestination)\*.nuspec" />
      <NuspecTransform Include="@(Nuspecs)">
        <Find>__SIGNALR_PACKAGE_VERSION__</Find>
        <ReplaceWith>$(PackageVersion)</ReplaceWith>
      </NuspecTransform>
      <NuspecTransform Include="@(Nuspecs)">
        <Find>__SIGNALR_REDIS_PACKAGE_VERSION__|__SIGNALR_SERVICE_BUS_PACKAGE_VERSION__</Find>
        <ReplaceWith>$(ScaleoutPackageVersion)</ReplaceWith>
      </NuspecTransform>
      <NuspecTransform Include="@(Nuspecs)">
        <Find>__KATANA_PACKAGE_VERSION__</Find>
        <ReplaceWith>$(KatanaPackageVersion)</ReplaceWith>
      </NuspecTransform>
      <NuspecTransform Include="@(Nuspecs)">
        <Find>__SIGNALR_LICENSE_URL__</Find>
        <ReplaceWith>https://raw.github.com/SignalR/SignalR/master/LICENSE.md</ReplaceWith>
      </NuspecTransform>
      <NuspecTransform Include="@(Nuspecs)">
        <Find>__SIGNALR_COPYRIGHT_NOTICE__</Find>
        <ReplaceWith>Copyright (c) Microsoft Open Technologies, Inc.  All rights reserved.</ReplaceWith>
      </NuspecTransform>
      <NuspecTransform Include="@(Nuspecs)">
        <Find>__SIGNALR_CLIENT_LICENSE_URL__</Find>
        <ReplaceWith>http://www.microsoft.com/web/webpi/eula/signalr_client_enu.htm</ReplaceWith>
      </NuspecTransform>
    </ItemGroup>

    <RegexTransform Items="@(NuspecTransform)" />
    <Exec Command="&quot;$(NuGetExePath)&quot; pack &quot;%(Nuspecs.Identity)&quot; -o &quot;$(PackagesDestinationDir)&quot; -basePath &quot;$(PackageSrcDir)&quot;"
            LogStandardErrorAsError="true" />
  </Target>

</Project>